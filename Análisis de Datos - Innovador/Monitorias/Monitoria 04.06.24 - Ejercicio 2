# Red neuronal
# Actividad con tensorflow

import tensorflow as tf
import tensorflow_datasets as tfds 

datos, metadatos = tfds.load('fashion_mnist', as_supervised=True, with_info=True)

metadatos

datos_entrenamiento, datos_prueba = datos['train'], datos['test']

nombre_clases = metadatos.features['label'].names 

nombre_clases

# Normalizar los datos de 0-255 a 0-1
def Normalizar(imagenes, etiquetas):
  imagenes = tf.cast(imagenes, tf.float32)
  imagenes/= 255 #"Aquí lo pasa de 0-255 a 0-1"
  return imagenes, etiquetas 

  # Normalizar los datos de entrenamiento y pruebas con la función que realizamos 

  datos_entrenamiento = datos_entrenamiento.map(Normalizar)
  datos_prueba = datos_prueba.map(Normalizar)

  # Agregar a cache (usar memoria en lugar de disco, para que el entrenamiento sea más rápido)

  datos_entrenamiento = datos_entrenamiento.cache()
  datos_prueba = datos_prueba.cache()

import matplotlib.pyplot as plt

# Mostrar una imagen 

for imagen, etiqueta in datos_entrenamiento.take(1):
  break
  imagen = imagen.numpy().reshape(28, 28) # Redimensionar

# Dibujar

plt.figure()
plt.imshow(imagen, cmap=plt.cm.binary)
plt.colorbar
plt.grid(False)
plt.show()

plt.figure(figsize=(10, 10))
for i, (imagen, etiqueta) in enumerate(datos_entrenamiento.take(25)):
  imagen = imagen.numpy().reshape(28, 28)
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(imagen, cmap=plt.cm.binary)
  plt.xlabel(nombre_clases[etiqueta])
  plt.show()

# Crear modelo 

modelo = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
    tf.keras.layers.Dense(50, activation=tf.nn.relu),
    tf.keras.layers.Dense(50, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.relu),                   
])

# Compilar el modelo 

modelo.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics = ['accuracy']
)
